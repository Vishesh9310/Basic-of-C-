//About:
    As we know that pointers are used to point some variables;
    similarly, the function pointer is a pointer used to point functions.
    It is basically used to store the address of a function.
    We can call the function by using the function pointer,
    or we can also pass the pointer to another function as a parameter.
    
    They are mainly useful for event-driven applications, callbacks,
    and even for storing the functions in arrays.

//What is the address of a function:
    Computer only understands the low-level language, i.e., binary form.
    The program we write in C++ is always in high-level language,
    so to convert the program into binary form, we use compiler.
    Compiler is a program that converts source code into an executable file.
    This executable file gets stored in RAM. The CPU starts the execution from the main() method,
    and it reads the copy in RAM but not the original file.
    
    All the functions and machine code instructions are data.
    This data is a bunch of bytes, and all these bytes have some address in RAM.
    The function pointer contains RAM address of the first instruction of a function.

//Syntax for Declaration:
    int(*funcptr)(int,int);

//Address of a function:
    We can get the address of a function very easily. We just need to mention the name of the function,
    we do not need to call the function.

    #include <iostream>  
    using namespace std;  
    
    int main(){  
        cout << "Address of a main() function is : " <<&main<<endl;  
        return 0;
    }

//Passing a function pointer as a parameter:
    The function pointer can be passed as a parameter to another function.