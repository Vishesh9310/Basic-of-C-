There are two ways to pass value or data to function in C language: call by value and call by reference.
Original value is not modified in call by value but it is modified in call by reference.


1. Call by value:

In call by value, original value is not modified.
In call by value, value being passed to the function is locally stored by the function parameter in stack memory location.
If you change the value of function parameter, it is changed for the current function only.
It will not change the value of variable inside the caller method such as main().

2. Call by reference:

In call by reference, original value is modified because we pass reference (address).
Here, address of the value is passed in the function, so actual and formal arguments share the same address space.
Hence, value changed inside the function, is reflected inside as well as outside the function.

difference between them:

call by value:
1. A copy of value is passed to the function.
2. Changes made inside the function is not reflected on other functions.
3. Actual and formal arguments will be created in different memory loacation.

call by reference:
1. An addressof value is passed to the function.
2. changes made inside the function is reflected outside the function also.
3. Actual and formal arguments will be created in same memory location.


Actual and formal parameters:
#include <iostream>  
using namespace std;  

void change(int value); 

int main(){  
    int data = 3;
    change(data);//actual parameter"data"
    cout << "Value of the data is: " << data<< endl;
    
    return 0;  
}  

void change(int value){//formal parameter "value"
    value = 5;  
}